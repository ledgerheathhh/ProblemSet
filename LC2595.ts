// 2595. 奇偶位数
// 简单
// 给你一个 正 整数 n 。
// 用 even 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的偶数下标的个数。
// 用 odd 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的奇数下标的个数。
// 请注意，在数字的二进制表示中，位下标的顺序 从右到左。
// 返回整数数组 answer ，其中 answer = [even, odd] 。

// 示例 1：
// 输入：n = 50
// 输出：[1,2]
// 解释：
// 50 的二进制表示是 110010。
// 在下标 1，4，5 对应的值为 1。

// 示例 2：
// 输入：n = 2
// 输出：[0,1]
// 解释：
// 2 的二进制表示是 10。
// 只有下标 1 对应的值为 1。

// 提示：
// 1 <= n <= 1000

function evenOddBit(n: number): number[] {
  // 初始化结果数组，res[0]记录偶数位的1的个数，res[1]记录奇数位的1的个数
  const res = [0, 0];
  // 初始化索引变量i，用于切换偶数位和奇数位的计数
  let i = 0;
  // 当n大于0时循环处理每一位
  while (n > 0) {
    // 检查当前最低位是否为1，若是，则对应位置计数加1
    res[i] += n & 1;
    // 将n右移一位，处理下一位
    n >>= 1;
    // 切换索引i（0变1，1变0），确保交替处理偶数和奇数位
    i ^= 1;
  }
  // 返回结果数组
  return res;
}

// **详细步骤：**

// 1. **初始化结果数组 `res`：**
//    ```typescript
//    const res = [0, 0];
//    ```
//    - `res[0]` 用于统计偶数位（第0位、第2位、第4位等）的 `1` 的数量。
//    - `res[1]` 用于统计奇数位（第1位、第3位、第5位等）的 `1` 的数量。

// 2. **初始化索引变量 `i`：**
//    ```typescript
//    let i = 0;
//    ```
//    - `i` 初始为 `0`，表示从偶数位开始处理。

// 3. **循环处理每一位：**
//    ```typescript
//    while (n > 0) {
//    ```
//    - 当 `n` 的二进制表示还有有效位（即 `n > 0`）时，继续循环。

// 4. **统计当前最低位的 `1`：**
//    ```typescript
//    res[i] += n & 1;
//    ```
//    - `n & 1` 获取 `n` 的最低位（二进制最后一位），结果为 `1` 或 `0`。
//    - 根据当前 `i` 的值（`0` 或 `1`），将结果累加到 `res[0]` 或 `res[1]`。

// 5. **右移 `n` 一位：**
//    ```typescript
//    n >>= 1;
//    ```
//    - 将 `n` 的二进制所有位右移一位，舍弃已处理的最低位，继续处理下一位。

// 6. **切换索引 `i`：**
//    ```typescript
//    i ^= 1;
//    ```
//    - 异或操作 `^= 1` 使 `i` 在 `0` 和 `1` 之间交替，确保偶数位和奇数位交替统计。

// **示例说明：**

// 以 `n = 5`（二进制 `101`）为例：

// 1. **初始状态：**
//    - `res = [0, 0]`，`i = 0`，`n = 5`（二进制 `101`）。

// 2. **第一次循环：**
//    - `n & 1` 得 `1`，`res[0]` 变为 `1`。
//    - `n` 右移一位变为 `2`（二进制 `10`）。
//    - `i` 异或 `1` 变为 `1`。

// 3. **第二次循环：**
//    - `n & 1` 得 `0`，`res[1]` 保持 `0`。
//    - `n` 右移一位变为 `1`（二进制 `1`）。
//    - `i` 异或 `1` 变为 `0`。

// 4. **第三次循环：**
//    - `n & 1` 得 `1`，`res[0]` 变为 `2`。
//    - `n` 右移一位变为 `0`，循环结束。
//    - `i` 异或 `1` 变为 `1`。

// 最终返回 `[2, 0]`，表示偶数位有 `2` 个 `1`，奇数位有 `0` 个 `1`。